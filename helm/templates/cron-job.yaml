{{- $releaseName := .Release.Name -}}
{{- $chartName := include "discrete-cleanup.name" . -}}
{{- $cloudProviderFlavor := include "discrete-cleanup.cloudProviderFlavor" . -}}
{{- $cloudProviderDockerRegistryUrl := include "discrete-cleanup.cloudProviderDockerRegistryUrl" . -}}
{{- $imageTag := include "discrete-cleanup.tag" . -}}
{{- if .Values.enabled -}}
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: {{ $releaseName }}-{{ $chartName }}
  labels:
    app: {{ $chartName }}
    component: {{ $chartName }}
    environment: {{ include "discrete-cleanup.environment" . }}
    release: {{ $releaseName }}
    {{- include "discrete-cleanup.labels" . | nindent 4 }}
spec:
  schedule: {{ .Values.cron.schedule | quote }}
  successfulJobsHistoryLimit: {{ .Values.cron.successfulJobsHistoryLimit }}
  failedJobsHistoryLimit: {{ .Values.cron.failedJobsHistoryLimit }}
  concurrencyPolicy: {{ .Values.cron.concurrencyPolicy }}
  jobTemplate:
    spec:
      template:
        spec:
         {{- if .Values.cloudProvider.imagePullSecretName }}
          imagePullSecrets:
            - name: {{ .Values.cloudProvider.imagePullSecretName | quote }}
          {{- end }}
          restartPolicy: {{ .Values.cron.restartPolicy }}
          containers:
            - name: {{ $releaseName }}-{{ $chartName }}-deployment
              {{- with .Values.image }}
              image: {{ $cloudProviderDockerRegistryUrl }}{{ .repository }}:{{ $imageTag }}
              {{- end }}
              env:
              {{- if eq (upper .Values.env.tileStorageProvider) "S3" }}
                - name: S3_ACCESS_KEY_ID
                  valueFrom:
                    secretKeyRef:
                      name: {{ .Values.s3Secret.name }}
                      key: accessKeyId
                - name: S3_SECRET_ACCESS_KEY
                  valueFrom:
                    secretKeyRef:
                      name: {{ .Values.s3Secret.name }}
                      key: secretAccessKey
                {{- else }}
                - name: FS_TILES_LOCATION
                  value: {{ .Values.storage.tilesPersistenceDisk.mountPath }}
                {{- end }}
                - name: FS_SOURCES_LOCATION
                  value: {{ .Values.storage.tiffsPersistenceDisk.mountPath }}
              envFrom:
                - configMapRef:
                    name: {{ $releaseName }}-{{ $chartName }}-configmap
              volumeMounts:
               {{- if or .Values.env.cleanupTypes.failedIngestionTasks .Values.env.cleanupTypes.successfulIngestion }}
                - name: sources-volume
                  mountPath: {{ .Values.storage.tiffsPersistenceDisk.mountPath }}
                  {{- if .Values.storage.tiffsPersistenceDisk.sourcesSubPath }}
                  subPath: {{ .Values.storage.tiffsPersistenceDisk.sourcesSubPath }}
                  {{- end }}
                {{- end }}
                {{- if ne (upper .Values.env.tileStorageProvider) "S3" }}
                - name: tiles-folder
                  mountPath: {{ .Values.storage.tilesPersistenceDisk.mountPath }}
                  {{- if .Values.storage.tilesPersistenceDisk.sourcesSubPath }}
                  subPath: {{ .Values.storage.tilesPersistenceDisk.tilesSubPath }}
                  {{- end }}
                {{- end }}
            {{- if .Values.resources.enabled }}
              resources:
                {{- toYaml .Values.resources.value | nindent 16 }}
              {{- end }}
          volumes:
          {{- if or .Values.env.cleanupTypes.failedIngestionTasks .Values.env.cleanupTypes.successfulIngestion }}
            - name: sources-volume
            {{- if .Values.storage.tiffsPersistenceDisk.useEmptyDir }}
              emptyDir: {}
            {{- else }}
              persistentVolumeClaim:
                claimName: {{ .Values.storage.tiffsPersistenceDisk.pvcName }}
            {{- end }}
          {{- end }}
            {{- if ne (upper .Values.env.tileStorageProvider) "S3" }}
            - name: tiles-folder
              {{- if .Values.storage.tilesPersistenceDisk.useEmptyDir }}
              emptyDir: {}
              {{- else }}
              persistentVolumeClaim:
                claimName: {{ .Values.storage.tilesPersistenceDisk.pvcName }}
              {{- end }}
            {{- end }}
{{- end -}}
