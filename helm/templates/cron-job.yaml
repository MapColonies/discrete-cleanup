{{- $releaseName := .Release.Name -}}
{{- $chartName := include "discrete-cleanup.name" . -}}
{{- $cronjobName := include "cronjob.fullname" . -}}
{{- $configmapName := include "configmap.fullname" . }}
{{- $cloudProviderFlavor := include "discrete-cleanup.cloudProviderFlavor" . -}}
{{- $cloudProviderDockerRegistryUrl := include "discrete-cleanup.cloudProviderDockerRegistryUrl" . -}}
{{- $imageTag := include "discrete-cleanup.tag" . -}}
{{- $s3 := (include "common.s3.merged" .) | fromYaml }}
{{- $fs := (include "common.fs.merged" .) | fromYaml }}
{{- $storage := (include "common.storage.merged" .) | fromYaml }}
{{- $cloudProviderImagePullSecretName := include "discrete-cleanup.cloudProviderImagePullSecretName" . -}}

{{- if .Values.enabled -}}

{{ $sslSecretName := ternary .Values.authentication.ssl.externalSecretName (printf "%s%s" .Release.Name "-open-ssl") .Values.authentication.ssl.useExternal }}

{{- if .Values.authentication.ssl.enabled }}
{{- if and .Values.authentication.ssl.useExternal (not .Values.authentication.ssl.externalSecretName) }}
{{- fail "When using external ssl secret the value for .Values.authentication.ssl.externalSecretName should be set" }}
{{- end }}
{{- end }}

apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ $cronjobName }}
  labels:
    app: {{ $chartName }}
    component: {{ $chartName }}
    environment: {{ include "discrete-cleanup.environment" . }}
    release: {{ $releaseName }}
    {{- include "discrete-cleanup.labels" . | nindent 4 }}
spec:
  schedule: {{ .Values.cron.schedule | quote }}
  successfulJobsHistoryLimit: {{ .Values.cron.successfulJobsHistoryLimit }}
  failedJobsHistoryLimit: {{ .Values.cron.failedJobsHistoryLimit }}
  concurrencyPolicy: {{ .Values.cron.concurrencyPolicy }}
  jobTemplate:
    spec:
      template:
        metadata:
          annotations:
          {{- if .Values.podAnnotations }}
          {{- toYaml .Values.podAnnotations | nindent 12 }}
          {{- end }}
        spec:
          {{- if .Values.global.useNodeAffinity }}
          affinity:
            podAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
              - labelSelector:
                  matchExpressions:
                  - key: nodeAffinity
                    operator: In
                    values:
                    - nodeAffinityPod
                topologyKey: kubernetes.io/hostname
          {{- end }}
          {{- if $cloudProviderImagePullSecretName }}
          imagePullSecrets:
            - name: {{ $cloudProviderImagePullSecretName | quote }}
          {{- end }}
          restartPolicy: {{ .Values.cron.restartPolicy }}
          containers:
            - name: {{ $releaseName }}
              {{- with .Values.image }}
              image: {{ $cloudProviderDockerRegistryUrl }}{{ .repository }}:{{ $imageTag }}
              {{- end }}
              imagePullPolicy: {{ .Values.imagePullPolicy }}
              env:
              {{- if eq (upper $storage.tilesStorageProvider) "S3" }}
                - name: S3_ACCESS_KEY_ID
                  valueFrom:
                    secretKeyRef:
                      name: {{ $s3.secretName }}
                      key: accessKeyId
                - name: S3_SECRET_ACCESS_KEY
                  valueFrom:
                    secretKeyRef:
                      name: {{ $s3.secretName }}
                      key: secretAccessKey
                {{- else }}
                - name: FS_TILES_LOCATION
                  value: /tiles
                {{- end }}
                - name: FS_SOURCES_LOCATION
                  value: /layerSources
                {{- if .Values.global.ca.secretName }}
                - name: REQUESTS_CA_BUNDLE
                  value: {{ printf "%s/%s" .Values.global.ca.path .Values.global.ca.key | quote }}
                - name: NODE_EXTRA_CA_CERTS
                  value: {{ printf "%s/%s" .Values.global.ca.path .Values.global.ca.key | quote }}
                {{- end }}
              envFrom:
                - configMapRef:
                    name: {{ $configmapName }}
              volumeMounts:
               {{- if or (.Values.env.cleanupTypes.failedIngestionTasks) (.Values.env.cleanupTypes.successfulIngestion) (.Values.env.cleanupTypes.successfulSwapUpdate) }}
                - name: sources-volume
                  mountPath: /layerSources
                  {{- if $fs.ingestionSourcePvc.subPath }}
                  subPath: {{ $fs.ingestionSourcePvc.subPath }}
                  {{- end }}
                {{- end }}
                  {{- if ne (upper $storage.tilesStorageProvider) "S3" }}
                - name: tiles-folder
                  mountPath: /tiles
                  {{- if $fs.internalPvc.tilesSubPath }}
                  subPath: {{ $fs.internalPvc.tilesSubPath }}
                  {{- end }}
                {{- end }}
                {{- if .Values.global.ca.secretName }}
                - mountPath: {{ printf "%s/%s" .Values.global.ca.path .Values.global.ca.key | quote }}
                  name: root-ca
                  subPath: {{ quote .Values.global.ca.key }}
                {{- end }}
                {{- if .Values.authentication.ssl.enabled }}
                - name: open-ssl
                  mountPath: "/etc/ssl/etc/ssl/openssl.cnf"
                  subPath: "openssl.cnf"
                {{- end }}
            {{- if .Values.resources.enabled }}
              resources:
                {{- toYaml .Values.resources.value | nindent 16 }}
              {{- end }}
          volumes:
          {{- if or (.Values.env.cleanupTypes.failedIngestionTasks) (.Values.env.cleanupTypes.successfulIngestion) (.Values.env.cleanupTypes.successfulSwapUpdate) }}
            - name: sources-volume
            {{- if .Values.local.fs.sources.useEmptyDir }}
              emptyDir: {}
            {{- else }}
              persistentVolumeClaim:
                claimName: {{ $fs.ingestionSourcePvc.name }}
            {{- end }}
          {{- end }}
            {{- if ne (upper $storage.tilesStorageProvider) "S3" }}
            - name: tiles-folder
              {{- if .Values.local.fs.tiles.useEmptyDir }}
              emptyDir: {}
              {{- else }}
              persistentVolumeClaim:
                claimName: {{ $fs.internalPvc.name }}
              {{- end }}
            {{- end }}
            {{- if .Values.global.ca.secretName }}
            - name: root-ca
              secret:
                secretName: {{ .Values.global.ca.secretName }}
            {{- end }}
            {{- if .Values.authentication.ssl.enabled }}
            - name: open-ssl
              secret:
                secretName: {{ $sslSecretName }}
            {{- end }}
{{- end -}}
